"""
Django management command to clean and set the correct exchange rate
"""

from django.core.management.base import BaseCommand
from django.utils import timezone
from decimal import Decimal
from datetime import date
from simulations.models import ExchangeRate


class Command(BaseCommand):
    help = 'Clean old exchange rates and set blue dollar rate as the only active rate'

    def handle(self, *args, **options):
        blue_rate = Decimal('1330.00')
        today = date.today()
        
        self.stdout.write("=== LIMPIANDO Y CONFIGURANDO TIPO DE CAMBIO ===\n")
        
        # Eliminar todos los tipos de cambio existentes
        old_count = ExchangeRate.objects.count()
        ExchangeRate.objects.all().delete()
        self.stdout.write(f"üóëÔ∏è  Eliminados {old_count} tipos de cambio anteriores")
        
        # Crear el nuevo tipo de cambio del d√≥lar blue
        exchange_rate = ExchangeRate.objects.create(
            date=today,
            source='D√≥lar Blue',
            rate=blue_rate
        )
        
        self.stdout.write(f"‚úÖ CREADO: {today}")
        self.stdout.write(f"   Tipo de cambio: ${blue_rate} ARS/USD")
        self.stdout.write(f"   Fuente: D√≥lar Blue")
        
        # Verificar que es el activo
        current_rate = ExchangeRate.get_latest_rate()
        self.stdout.write(f"\nüîÑ Tipo de cambio activo: ${current_rate} ARS/USD")
        
        # Mostrar impacto en c√°lculos
        panels = 12
        investment_usd = 6000  # 12 paneles √ó $500
        investment_ars = investment_usd * current_rate
        
        self.stdout.write(f"\nüí∞ IMPACTO EN C√ÅLCULOS:")
        self.stdout.write(f"   Ejemplo (12 paneles):")
        self.stdout.write(f"   ‚Ä¢ Inversi√≥n USD: ${investment_usd:,}")
        self.stdout.write(f"   ‚Ä¢ Inversi√≥n ARS: ${investment_ars:,.0f}")
        
        self.stdout.write(
            self.style.SUCCESS('\n‚úÖ Tipo de cambio configurado exitosamente!')
        )
